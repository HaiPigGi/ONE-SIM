package report;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import core.DTNHost;
import core.Message;
import core.MessageListener;
import core.SimClock;
import core.UpdateListener;

public class DropPerIntervalWithBufferOc extends Report implements MessageListener, UpdateListener {
    private Map<DTNHost, List<Integer>> droppedMessagesByHost;
    private int interval;
    private double lastRecord;

    public DropPerIntervalWithBufferOc() {
        init();
        this.interval = 300; // Set interval to 5 seconds
        this.lastRecord = -1; // Initialize lastRecord to an invalid value
        this.droppedMessagesByHost = new HashMap<>(); // Initialize bufferOccupancy map
    }

    // Initialize method to set up data structures
    protected void init() {
        super.init();
    }

    // MessageListener method to handle deleted messages
    public void messageDeleted(Message m, DTNHost where, boolean dropped) {
        if (isWarmupID(m.getId())) {
            return;
        }
        if (dropped) {
            List<Integer> droppedList = droppedMessagesByHost.getOrDefault(where, new ArrayList<>());
            droppedList.add(1); // Increment by 1 for each dropped message
            droppedMessagesByHost.put(where, droppedList);
        }
    }

    // MessageListener methods to handle other message events
    public void messageTransferAborted(Message m, DTNHost from, DTNHost to) {
    }

    public void messageTransferred(Message m, DTNHost from, DTNHost to, boolean finalTarget) {
    }

    public void newMessage(Message m) {
    }

    public void messageTransferStarted(Message m, DTNHost from, DTNHost to) {
    }

    // UpdateListener method to handle updates at specified intervals
    public void updated(List<DTNHost> hosts) {
        if (SimClock.getTime() - lastRecord >= interval) {
            lastRecord = SimClock.getTime();
            recordDroppedMessages(hosts); // Record buffer occupancy for each host
        }
    }

    private void recordDroppedMessages(List<DTNHost> hosts) {
        for (DTNHost h : hosts) {
            // Mendapatkan jumlah pesan yang terjatuh pada host tersebut
            int droppedCount = droppedMessagesByHost.getOrDefault(h, new ArrayList<>()).size();
            List<Integer> droppedList = droppedMessagesByHost.getOrDefault(h, new ArrayList<>());
            droppedList.add(droppedCount + 1); // Menambahkan 1 untuk setiap pesan yang terjatuh
            droppedMessagesByHost.put(h, droppedList);
        }
    }

    @Override
    public void done() {
        StringBuilder stats = new StringBuilder();
        for (Map.Entry<DTNHost, List<Integer>> entry : droppedMessagesByHost.entrySet()) {
            stats.append(entry.getKey()).append(" : ");
            stats.append(entry.getValue()).append("\n");
        }

        write(stats.toString());
        super.done();
    }

}
